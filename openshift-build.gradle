import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.DockerRegistryCredentials
import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.container.extras.*
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
apply plugin: com.bmuschko.gradle.docker.DockerJavaApplicationPlugin

if (project.hasProperty('openshiftEnv')) {
    ext.openshiftEnv = openshiftEnv.replaceAll('/', '-')
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.bmuschko:gradle-docker-plugin:3.2.6"
    }
}

task buildDocker(type: DockerBuildImage) {

    tag = "innovateuk/${project.name.replaceAll(/ifs-/, "")}"
    inputDir = project.projectDir

    outputs.upToDateWhen {

        def image = tag
        if(image.contains(":")) {
            image = image.substring(0, image.indexOf(":"))
        }

        "docker images".execute().text.contains("$image ")
    }
}

task tagDocker(type: DockerTagImage) {
    dependsOn buildDocker
    imageId = buildDocker.getTag()
    repository = project.dockerRegistry + "/" + openshiftEnv + "/" + project.name.replaceAll(/ifs-/, "")
    tag = project.version
}

task stop(type: DockerStopContainer) {
    targetContainerId { createContainer.getContainerId() }
    onError {
        //Deliberately ignore
    }
}

task removeContainer(type: DockerRemoveContainer, dependsOn: stop) {
    targetContainerId { createContainer.getContainerId() }
    onError {
        //Deliberately ignore
    }
}

task createContainer(type: DockerCreateContainer, dependsOn: [buildDocker, removeContainer]) {
    imageId = "innovateuk/${project.name.replaceAll(/ifs-/, "")}"
    containerName = "${project.name.replaceAll(/ifs-/, "")}"
    containerId = "${project.name.replaceAll(/ifs-/, "")}"
    network="ifs"
}

task deploy(type: DockerStartContainer, dependsOn: createContainer) {
    targetContainerId { createContainer.getContainerId() }
}

task wait(type: DockerWaitHealthyContainer) {
    targetContainerId { createContainer.getContainerId() }
}
wait.mustRunAfter deploy
